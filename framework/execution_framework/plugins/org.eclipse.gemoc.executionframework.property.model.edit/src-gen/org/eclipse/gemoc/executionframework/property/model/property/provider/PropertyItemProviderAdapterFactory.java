/**
 */
package org.eclipse.gemoc.executionframework.property.model.property.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.eclipse.gemoc.executionframework.property.model.property.util.PropertyAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PropertyItemProviderAdapterFactory extends PropertyAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PropertyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.QuantifiedProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantifiedPropertyItemProvider quantifiedPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.QuantifiedProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantifiedPropertyAdapter() {
		if (quantifiedPropertyItemProvider == null) {
			quantifiedPropertyItemProvider = new QuantifiedPropertyItemProvider(this);
		}

		return quantifiedPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.EPLProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPLPropertyItemProvider eplPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.EPLProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEPLPropertyAdapter() {
		if (eplPropertyItemProvider == null) {
			eplPropertyItemProvider = new EPLPropertyItemProvider(this);
		}

		return eplPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Absence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbsenceItemProvider absenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Absence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbsenceAdapter() {
		if (absenceItemProvider == null) {
			absenceItemProvider = new AbsenceItemProvider(this);
		}

		return absenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Universality} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UniversalityItemProvider universalityItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Universality}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUniversalityAdapter() {
		if (universalityItemProvider == null) {
			universalityItemProvider = new UniversalityItemProvider(this);
		}

		return universalityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Existence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExistenceItemProvider existenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Existence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExistenceAdapter() {
		if (existenceItemProvider == null) {
			existenceItemProvider = new ExistenceItemProvider(this);
		}

		return existenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Response} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Response}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Precedence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrecedenceItemProvider precedenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Precedence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrecedenceAdapter() {
		if (precedenceItemProvider == null) {
			precedenceItemProvider = new PrecedenceItemProvider(this);
		}

		return precedenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Globally} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GloballyItemProvider globallyItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Globally}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGloballyAdapter() {
		if (globallyItemProvider == null) {
			globallyItemProvider = new GloballyItemProvider(this);
		}

		return globallyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Before} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BeforeItemProvider beforeItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Before}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBeforeAdapter() {
		if (beforeItemProvider == null) {
			beforeItemProvider = new BeforeItemProvider(this);
		}

		return beforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.Between} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BetweenItemProvider betweenItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.Between}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBetweenAdapter() {
		if (betweenItemProvider == null) {
			betweenItemProvider = new BetweenItemProvider(this);
		}

		return betweenItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.AfterUntil} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterUntilItemProvider afterUntilItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.AfterUntil}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterUntilAdapter() {
		if (afterUntilItemProvider == null) {
			afterUntilItemProvider = new AfterUntilItemProvider(this);
		}

		return afterUntilItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.eclipse.gemoc.executionframework.property.model.property.After} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AfterItemProvider afterItemProvider;

	/**
	 * This creates an adapter for a {@link org.eclipse.gemoc.executionframework.property.model.property.After}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAfterAdapter() {
		if (afterItemProvider == null) {
			afterItemProvider = new AfterItemProvider(this);
		}

		return afterItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (propertyItemProvider != null)
			propertyItemProvider.dispose();
		if (quantifiedPropertyItemProvider != null)
			quantifiedPropertyItemProvider.dispose();
		if (eplPropertyItemProvider != null)
			eplPropertyItemProvider.dispose();
		if (absenceItemProvider != null)
			absenceItemProvider.dispose();
		if (universalityItemProvider != null)
			universalityItemProvider.dispose();
		if (existenceItemProvider != null)
			existenceItemProvider.dispose();
		if (responseItemProvider != null)
			responseItemProvider.dispose();
		if (precedenceItemProvider != null)
			precedenceItemProvider.dispose();
		if (globallyItemProvider != null)
			globallyItemProvider.dispose();
		if (beforeItemProvider != null)
			beforeItemProvider.dispose();
		if (betweenItemProvider != null)
			betweenItemProvider.dispose();
		if (afterUntilItemProvider != null)
			afterUntilItemProvider.dispose();
		if (afterItemProvider != null)
			afterItemProvider.dispose();
	}

}
