activity benchmark {
	// constants
	int inc = 1,
	int maxLoop = 99,
	int mod = 10,
	
	// variables
	int counterVar = 0,
	int alwaysVar_0 = 0,
	int existsVar_0 = 0,
	int absenceVar_0 = 0,
	int precedenceVar1_0 = 0,
	int precedenceVar2_0 = 0,
	int precedenceVar3_0 = -91,
	int precedenceVar4_0 = -93,
	int responseVar1_0 = 0,
	int responseVar2_0 = 0,
	int afterVar_0 = -50,
	int beforeVar_0 = -95,
	int betweenVar1_0 = 0,
	int betweenVar2_0 = 0,
	int afterUntilVar1_0 = 0,
	int afterUntilVar2_0 = 0,
	int alwaysVar_1 = 0,
	int existsVar_1 = 0,
	int absenceVar_1 = 0,
	int precedenceVar1_1 = 0,
	int precedenceVar2_1 = 0,
	int precedenceVar3_1 = -91,
	int precedenceVar4_1 = -93,
	int responseVar1_1 = 0,
	int responseVar2_1 = 0,
	int afterVar_1 = -50,
	int beforeVar_1 = -95,
	int betweenVar1_1 = 0,
	int betweenVar2_1 = 0,
	int afterUntilVar1_1 = 0,
	int afterUntilVar2_1 = 0,
	int alwaysVar_2 = 0,
	int existsVar_2 = 0,
	int absenceVar_2 = 0,
	int precedenceVar1_2 = 0,
	int precedenceVar2_2 = 0,
	int precedenceVar3_2 = -91,
	int precedenceVar4_2 = -93,
	int responseVar1_2 = 0,
	int responseVar2_2 = 0,
	int afterVar_2 = -50,
	int beforeVar_2 = -95,
	int betweenVar1_2 = 0,
	int betweenVar2_2 = 0,
	int afterUntilVar1_2 = 0,
	int afterUntilVar2_2 = 0,
	int alwaysVar_3 = 0,
	int existsVar_3 = 0,
	int absenceVar_3 = 0,
	int precedenceVar1_3 = 0,
	int precedenceVar2_3 = 0,
	int precedenceVar3_3 = -91,
	int precedenceVar4_3 = -93,
	int responseVar1_3 = 0,
	int responseVar2_3 = 0,
	int afterVar_3 = -50,
	int beforeVar_3 = -95,
	int betweenVar1_3 = 0,
	int betweenVar2_3 = 0,
	int afterUntilVar1_3 = 0,
	int afterUntilVar2_3 = 0,
	int alwaysVar_4 = 0,
	int existsVar_4 = 0,
	int absenceVar_4 = 0,
	int precedenceVar1_4 = 0,
	int precedenceVar2_4 = 0,
	int precedenceVar3_4 = -91,
	int precedenceVar4_4 = -93,
	int responseVar1_4 = 0,
	int responseVar2_4 = 0,
	int afterVar_4 = -50,
	int beforeVar_4 = -95,
	int betweenVar1_4 = 0,
	int betweenVar2_4 = 0,
	int afterUntilVar1_4 = 0,
	int afterUntilVar2_4 = 0,
	int alwaysVar_5 = 0,
	int existsVar_5 = 0,
	int absenceVar_5 = 0,
	int precedenceVar1_5 = 0,
	int precedenceVar2_5 = 0,
	int precedenceVar3_5 = -91,
	int precedenceVar4_5 = -93,
	int responseVar1_5 = 0,
	int responseVar2_5 = 0,
	int afterVar_5 = -50,
	int beforeVar_5 = -95,
	int betweenVar1_5 = 0,
	int betweenVar2_5 = 0,
	int afterUntilVar1_5 = 0,
	int afterUntilVar2_5 = 0,
	int alwaysVar_6 = 0,
	int existsVar_6 = 0,
	int absenceVar_6 = 0,
	int precedenceVar1_6 = 0,
	int precedenceVar2_6 = 0,
	int precedenceVar3_6 = -91,
	int precedenceVar4_6 = -93,
	int responseVar1_6 = 0,
	int responseVar2_6 = 0,
	int afterVar_6 = -50,
	int beforeVar_6 = -95,
	int betweenVar1_6 = 0,
	int betweenVar2_6 = 0,
	int afterUntilVar1_6 = 0,
	int afterUntilVar2_6 = 0,
	int alwaysVar_7 = 0,
	int existsVar_7 = 0,
	int absenceVar_7 = 0,
	int precedenceVar1_7 = 0,
	int precedenceVar2_7 = 0,
	int precedenceVar3_7 = -91,
	int precedenceVar4_7 = -93,
	int responseVar1_7 = 0,
	int responseVar2_7 = 0,
	int afterVar_7 = -50,
	int beforeVar_7 = -95,
	int betweenVar1_7 = 0,
	int betweenVar2_7 = 0,
	int afterUntilVar1_7 = 0,
	int afterUntilVar2_7 = 0,
	int alwaysVar_8 = 0,
	int existsVar_8 = 0,
	int absenceVar_8 = 0,
	int precedenceVar1_8 = 0,
	int precedenceVar2_8 = 0,
	int precedenceVar3_8 = -91,
	int precedenceVar4_8 = -93,
	int responseVar1_8 = 0,
	int responseVar2_8 = 0,
	int afterVar_8 = -50,
	int beforeVar_8 = -95,
	int betweenVar1_8 = 0,
	int betweenVar2_8 = 0,
	int afterUntilVar1_8 = 0,
	int afterUntilVar2_8 = 0,
	int alwaysVar_9 = 0,
	int existsVar_9 = 0,
	int absenceVar_9 = 0,
	int precedenceVar1_9 = 0,
	int precedenceVar2_9 = 0,
	int precedenceVar3_9 = -91,
	int precedenceVar4_9 = -93,
	int responseVar1_9 = 0,
	int responseVar2_9 = 0,
	int afterVar_9 = -50,
	int beforeVar_9 = -95,
	int betweenVar1_9 = 0,
	int betweenVar2_9 = 0,
	int afterUntilVar1_9 = 0,
	int afterUntilVar2_9 = 0,
	bool doneVar = false,
	bool notDoneVar = true
	
	nodes {
		initial initialNode out(edge01),
		merge mergeNode in (edge01, edge13) out (edge02),
		action counterAction comp {
			counterVar = counterVar + inc,
			doneVar = counterVar >= maxLoop,
			notDoneVar = !doneVar
		} in (edge02) out (edge03),
		action alwaysAction comp {
			alwaysVar_0 = counterVar % mod,
			alwaysVar_1 = counterVar % mod,
			alwaysVar_2 = counterVar % mod,
			alwaysVar_3 = counterVar % mod,
			alwaysVar_4 = counterVar % mod,
			alwaysVar_5 = counterVar % mod,
			alwaysVar_6 = counterVar % mod,
			alwaysVar_7 = counterVar % mod,
			alwaysVar_8 = counterVar % mod,
			alwaysVar_9 = counterVar % mod
		} in (edge03) out (edge04),
		action existsAction comp {
			existsVar_0 = counterVar % mod,
			existsVar_1 = counterVar % mod,
			existsVar_2 = counterVar % mod,
			existsVar_3 = counterVar % mod,
			existsVar_4 = counterVar % mod,
			existsVar_5 = counterVar % mod,
			existsVar_6 = counterVar % mod,
			existsVar_7 = counterVar % mod,
			existsVar_8 = counterVar % mod,
			existsVar_9 = counterVar % mod
		} in (edge04) out (edge05),
		action absenceAction comp {
			absenceVar_0 = counterVar % mod,
			absenceVar_1 = counterVar % mod,
			absenceVar_2 = counterVar % mod,
			absenceVar_3 = counterVar % mod,
			absenceVar_4 = counterVar % mod,
			absenceVar_5 = counterVar % mod,
			absenceVar_6 = counterVar % mod,
			absenceVar_7 = counterVar % mod,
			absenceVar_8 = counterVar % mod,
			absenceVar_9 = counterVar % mod
		} in (edge05) out (edge06),
		action precedenceAction comp {
			precedenceVar1_0 = counterVar % mod,
			precedenceVar2_0 = counterVar % mod,
			precedenceVar3_0 = precedenceVar3_0 + inc,
			precedenceVar4_0 = precedenceVar4_0 + inc,
			precedenceVar1_1 = counterVar % mod,
			precedenceVar2_1 = counterVar % mod,
			precedenceVar3_1 = precedenceVar3_1 + inc,
			precedenceVar4_1 = precedenceVar4_1 + inc,
			precedenceVar1_2 = counterVar % mod,
			precedenceVar2_2 = counterVar % mod,
			precedenceVar3_2 = precedenceVar3_2 + inc,
			precedenceVar4_2 = precedenceVar4_2 + inc,
			precedenceVar1_3 = counterVar % mod,
			precedenceVar2_3 = counterVar % mod,
			precedenceVar3_3 = precedenceVar3_3 + inc,
			precedenceVar4_3 = precedenceVar4_3 + inc,
			precedenceVar1_4 = counterVar % mod,
			precedenceVar2_4 = counterVar % mod,
			precedenceVar3_4 = precedenceVar3_4 + inc,
			precedenceVar4_4 = precedenceVar4_4 + inc,
			precedenceVar1_5 = counterVar % mod,
			precedenceVar2_5 = counterVar % mod,
			precedenceVar3_5 = precedenceVar3_5 + inc,
			precedenceVar4_5 = precedenceVar4_5 + inc,
			precedenceVar1_6 = counterVar % mod,
			precedenceVar2_6 = counterVar % mod,
			precedenceVar3_6 = precedenceVar3_6 + inc,
			precedenceVar4_6 = precedenceVar4_6 + inc,
			precedenceVar1_7 = counterVar % mod,
			precedenceVar2_7 = counterVar % mod,
			precedenceVar3_7 = precedenceVar3_7 + inc,
			precedenceVar4_7 = precedenceVar4_7 + inc,
			precedenceVar1_8 = counterVar % mod,
			precedenceVar2_8 = counterVar % mod,
			precedenceVar3_8 = precedenceVar3_8 + inc,
			precedenceVar4_8 = precedenceVar4_8 + inc,
			precedenceVar1_9 = counterVar % mod,
			precedenceVar2_9 = counterVar % mod,
			precedenceVar3_9 = precedenceVar3_9 + inc,
			precedenceVar4_9 = precedenceVar4_9 + inc
		} in (edge06) out (edge07),
		action responseAction comp {
			responseVar1_0 = counterVar % mod,
			responseVar2_0 = counterVar % mod,
			responseVar1_1 = counterVar % mod,
			responseVar2_1 = counterVar % mod,
			responseVar1_2 = counterVar % mod,
			responseVar2_2 = counterVar % mod,
			responseVar1_3 = counterVar % mod,
			responseVar2_3 = counterVar % mod,
			responseVar1_4 = counterVar % mod,
			responseVar2_4 = counterVar % mod,
			responseVar1_5 = counterVar % mod,
			responseVar2_5 = counterVar % mod,
			responseVar1_6 = counterVar % mod,
			responseVar2_6 = counterVar % mod,
			responseVar1_7 = counterVar % mod,
			responseVar2_7 = counterVar % mod,
			responseVar1_8 = counterVar % mod,
			responseVar2_8 = counterVar % mod,
			responseVar1_9 = counterVar % mod,
			responseVar2_9 = counterVar % mod
		} in (edge07) out (edge08),
		action afterAction comp {
			afterVar_0 = afterVar_0 + inc,
			afterVar_1 = afterVar_1 + inc,
			afterVar_2 = afterVar_2 + inc,
			afterVar_3 = afterVar_3 + inc,
			afterVar_4 = afterVar_4 + inc,
			afterVar_5 = afterVar_5 + inc,
			afterVar_6 = afterVar_6 + inc,
			afterVar_7 = afterVar_7 + inc,
			afterVar_8 = afterVar_8 + inc,
			afterVar_9 = afterVar_9 + inc
		} in (edge08) out (edge09),
		action beforeAction comp {
			beforeVar_0 = beforeVar_0 + inc,
			beforeVar_1 = beforeVar_1 + inc,
			beforeVar_2 = beforeVar_2 + inc,
			beforeVar_3 = beforeVar_3 + inc,
			beforeVar_4 = beforeVar_4 + inc,
			beforeVar_5 = beforeVar_5 + inc,
			beforeVar_6 = beforeVar_6 + inc,
			beforeVar_7 = beforeVar_7 + inc,
			beforeVar_8 = beforeVar_8 + inc,
			beforeVar_9 = beforeVar_9 + inc
		} in (edge09) out (edge10),
		action betweenAction comp {
			betweenVar1_0 = counterVar % mod,
			betweenVar2_0 = counterVar % mod,
			betweenVar1_1 = counterVar % mod,
			betweenVar2_1 = counterVar % mod,
			betweenVar1_2 = counterVar % mod,
			betweenVar2_2 = counterVar % mod,
			betweenVar1_3 = counterVar % mod,
			betweenVar2_3 = counterVar % mod,
			betweenVar1_4 = counterVar % mod,
			betweenVar2_4 = counterVar % mod,
			betweenVar1_5 = counterVar % mod,
			betweenVar2_5 = counterVar % mod,
			betweenVar1_6 = counterVar % mod,
			betweenVar2_6 = counterVar % mod,
			betweenVar1_7 = counterVar % mod,
			betweenVar2_7 = counterVar % mod,
			betweenVar1_8 = counterVar % mod,
			betweenVar2_8 = counterVar % mod,
			betweenVar1_9 = counterVar % mod,
			betweenVar2_9 = counterVar % mod
		} in (edge10) out (edge11),
		action afterUntilAction comp {
			afterUntilVar1_0 = counterVar % mod,
			afterUntilVar2_0 = counterVar % mod,
			afterUntilVar1_1 = counterVar % mod,
			afterUntilVar2_1 = counterVar % mod,
			afterUntilVar1_2 = counterVar % mod,
			afterUntilVar2_2 = counterVar % mod,
			afterUntilVar1_3 = counterVar % mod,
			afterUntilVar2_3 = counterVar % mod,
			afterUntilVar1_4 = counterVar % mod,
			afterUntilVar2_4 = counterVar % mod,
			afterUntilVar1_5 = counterVar % mod,
			afterUntilVar2_5 = counterVar % mod,
			afterUntilVar1_6 = counterVar % mod,
			afterUntilVar2_6 = counterVar % mod,
			afterUntilVar1_7 = counterVar % mod,
			afterUntilVar2_7 = counterVar % mod,
			afterUntilVar1_8 = counterVar % mod,
			afterUntilVar2_8 = counterVar % mod,
			afterUntilVar1_9 = counterVar % mod,
			afterUntilVar2_9 = counterVar % mod
		} in (edge11) out (edge12),
		decision decisionNode in(edge12) out(edge13, edge14),
		final finalNode in(edge14)
	}
	
	edges {
		flow edge01 from initialNode to mergeNode,
		flow edge02 from mergeNode to counterAction,
		flow edge03 from counterAction to alwaysAction,
		flow edge04 from alwaysAction to existsAction,
		flow edge05 from existsAction to absenceAction,
		flow edge06 from absenceAction to precedenceAction,
		flow edge07 from precedenceAction to responseAction,
		flow edge08 from responseAction to afterAction,
		flow edge09 from afterAction to beforeAction,
		flow edge10 from beforeAction to betweenAction,
		flow edge11 from betweenAction to afterUntilAction,
		flow edge12 from afterUntilAction to decisionNode,
		flow edge13 from decisionNode to mergeNode [notDoneVar],
		flow edge14 from decisionNode to finalNode [doneVar]
	}
}