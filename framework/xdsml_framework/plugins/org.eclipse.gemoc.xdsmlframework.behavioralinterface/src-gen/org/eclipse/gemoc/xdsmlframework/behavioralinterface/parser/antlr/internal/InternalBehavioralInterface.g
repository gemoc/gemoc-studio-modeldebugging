/*
 * generated by Xtext 2.12.0
 */
grammar InternalBehavioralInterface;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.gemoc.xdsmlframework.behavioralinterface.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.gemoc.xdsmlframework.behavioralinterface.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.services.BehavioralInterfaceGrammarAccess;

}

@parser::members {

 	private BehavioralInterfaceGrammarAccess grammarAccess;

    public InternalBehavioralInterfaceParser(TokenStream input, BehavioralInterfaceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "BehavioralInterface";
   	}

   	@Override
   	protected BehavioralInterfaceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBehavioralInterface
entryRuleBehavioralInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBehavioralInterfaceRule()); }
	iv_ruleBehavioralInterface=ruleBehavioralInterface
	{ $current=$iv_ruleBehavioralInterface.current; }
	EOF;

// Rule BehavioralInterface
ruleBehavioralInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='dsl'
		{
			newLeafNode(otherlv_0, grammarAccess.getBehavioralInterfaceAccess().getDslKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBehavioralInterfaceAccess().getDslNameFQNParserRuleCall_1_0());
				}
				lv_dslName_1_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehavioralInterfaceRule());
					}
					set(
						$current,
						"dslName",
						lv_dslName_1_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBehavioralInterfaceAccess().getEventsEventParserRuleCall_2_0());
				}
				lv_events_2_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBehavioralInterfaceRule());
					}
					add(
						$current,
						"events",
						lv_events_2_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEventAccess().getInputEventParserRuleCall_0());
		}
		this_InputEvent_0=ruleInputEvent
		{
			$current = $this_InputEvent_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getOutputEventParserRuleCall_1());
		}
		this_OutputEvent_1=ruleOutputEvent
		{
			$current = $this_OutputEvent_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleInputEvent
entryRuleInputEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputEventRule()); }
	iv_ruleInputEvent=ruleInputEvent
	{ $current=$iv_ruleInputEvent.current; }
	EOF;

// Rule InputEvent
ruleInputEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='input'
		{
			newLeafNode(otherlv_0, grammarAccess.getInputEventAccess().getInputKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputEventAccess().getNameFQNParserRuleCall_1_0());
				}
				lv_name_1_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputEventRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='rule'
		{
			newLeafNode(otherlv_2, grammarAccess.getInputEventAccess().getRuleKeyword_2());
		}
		otherlv_3='='
		{
			newLeafNode(otherlv_3, grammarAccess.getInputEventAccess().getEqualsSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInputEventAccess().getRuleFQNParserRuleCall_4_0());
				}
				lv_rule_4_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInputEventRule());
					}
					set(
						$current,
						"rule",
						lv_rule_4_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5='params'
			{
				newLeafNode(otherlv_5, grammarAccess.getInputEventAccess().getParamsKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputEventAccess().getParamsEventParameterParserRuleCall_5_1_0());
					}
					lv_params_6_0=ruleEventParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputEventRule());
						}
						add(
							$current,
							"params",
							lv_params_6_0,
							"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.EventParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_7=','
				{
					newLeafNode(otherlv_7, grammarAccess.getInputEventAccess().getCommaKeyword_5_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getInputEventAccess().getParamsEventParameterParserRuleCall_5_2_1_0());
						}
						lv_params_8_0=ruleEventParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getInputEventRule());
							}
							add(
								$current,
								"params",
								lv_params_8_0,
								"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.EventParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_9='interruptible'
			{
				newLeafNode(otherlv_9, grammarAccess.getInputEventAccess().getInterruptibleKeyword_6_0());
			}
			otherlv_10='='
			{
				newLeafNode(otherlv_10, grammarAccess.getInputEventAccess().getEqualsSignKeyword_6_1());
			}
			(
				(
					(
						lv_interruptible_11_1='true'
						{
							newLeafNode(lv_interruptible_11_1, grammarAccess.getInputEventAccess().getInterruptibleTrueKeyword_6_2_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInputEventRule());
							}
							setWithLastConsumed($current, "interruptible", true, null);
						}
						    |
						lv_interruptible_11_2='false'
						{
							newLeafNode(lv_interruptible_11_2, grammarAccess.getInputEventAccess().getInterruptibleFalseKeyword_6_2_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getInputEventRule());
							}
							setWithLastConsumed($current, "interruptible", true, null);
						}
					)
				)
			)
		)?
		(
			otherlv_12='precondition'
			{
				newLeafNode(otherlv_12, grammarAccess.getInputEventAccess().getPreconditionKeyword_7_0());
			}
			otherlv_13='='
			{
				newLeafNode(otherlv_13, grammarAccess.getInputEventAccess().getEqualsSignKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInputEventAccess().getPreconditionFQNParserRuleCall_7_2_0());
					}
					lv_precondition_14_0=ruleFQN
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInputEventRule());
						}
						set(
							$current,
							"precondition",
							lv_precondition_14_0,
							"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleOutputEvent
entryRuleOutputEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputEventRule()); }
	iv_ruleOutputEvent=ruleOutputEvent
	{ $current=$iv_ruleOutputEvent.current; }
	EOF;

// Rule OutputEvent
ruleOutputEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='output'
		{
			newLeafNode(otherlv_0, grammarAccess.getOutputEventAccess().getOutputKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputEventAccess().getNameFQNParserRuleCall_1_0());
				}
				lv_name_1_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputEventRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getOutputEventAccess().getColonKeyword_2());
		}
		otherlv_3='rule'
		{
			newLeafNode(otherlv_3, grammarAccess.getOutputEventAccess().getRuleKeyword_3());
		}
		otherlv_4='='
		{
			newLeafNode(otherlv_4, grammarAccess.getOutputEventAccess().getEqualsSignKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOutputEventAccess().getRuleFQNParserRuleCall_5_0());
				}
				lv_rule_5_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOutputEventRule());
					}
					set(
						$current,
						"rule",
						lv_rule_5_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6='params'
			{
				newLeafNode(otherlv_6, grammarAccess.getOutputEventAccess().getParamsKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOutputEventAccess().getParamsEventParameterParserRuleCall_6_1_0());
					}
					lv_params_7_0=ruleEventParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOutputEventRule());
						}
						add(
							$current,
							"params",
							lv_params_7_0,
							"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.EventParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getOutputEventAccess().getCommaKeyword_6_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOutputEventAccess().getParamsEventParameterParserRuleCall_6_2_1_0());
						}
						lv_params_9_0=ruleEventParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOutputEventRule());
							}
							add(
								$current,
								"params",
								lv_params_9_0,
								"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.EventParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEventParameter
entryRuleEventParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventParameterRule()); }
	iv_ruleEventParameter=ruleEventParameter
	{ $current=$iv_ruleEventParameter.current; }
	EOF;

// Rule EventParameter
ruleEventParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEventParameterAccess().getNameFQNParserRuleCall_0_0());
				}
				lv_name_0_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventParameterRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventParameterAccess().getTypeFQNParserRuleCall_1_0());
				}
				lv_type_1_0=ruleFQN
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventParameterRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_many_2_0='*'
				{
					newLeafNode(lv_many_2_0, grammarAccess.getEventParameterAccess().getManyAsteriskKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventParameterRule());
					}
					setWithLastConsumed($current, "many", true, "*");
				}
			)
		)
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
