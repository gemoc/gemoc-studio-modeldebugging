/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.xdsmlframework.behavioralinterface.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.BehavioralInterface;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.BehavioralInterfacePackage;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.EventParameter;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.InputEvent;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.OutputEvent;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.services.BehavioralInterfaceGrammarAccess;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class BehavioralInterfaceSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BehavioralInterfaceGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BehavioralInterfacePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BehavioralInterfacePackage.BEHAVIORAL_INTERFACE:
				sequence_BehavioralInterface(context, (BehavioralInterface) semanticObject); 
				return; 
			case BehavioralInterfacePackage.EVENT_PARAMETER:
				sequence_EventParameter(context, (EventParameter) semanticObject); 
				return; 
			case BehavioralInterfacePackage.INPUT_EVENT:
				sequence_InputEvent(context, (InputEvent) semanticObject); 
				return; 
			case BehavioralInterfacePackage.OUTPUT_EVENT:
				sequence_OutputEvent(context, (OutputEvent) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BehavioralInterface returns BehavioralInterface
	 *
	 * Constraint:
	 *     (dslName=FQN events+=Event*)
	 */
	protected void sequence_BehavioralInterface(ISerializationContext context, BehavioralInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EventParameter returns EventParameter
	 *
	 * Constraint:
	 *     (name=FQN type=FQN many?='*'?)
	 */
	protected void sequence_EventParameter(ISerializationContext context, EventParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns InputEvent
	 *     InputEvent returns InputEvent
	 *
	 * Constraint:
	 *     (
	 *         name=FQN 
	 *         ruleDeclaringType=FQN 
	 *         rule=ID 
	 *         (params+=EventParameter params+=EventParameter*)? 
	 *         (interruptible?='true' | interruptible?='false')? 
	 *         (preconditionDeclaringType=FQN precondition=ID)?
	 *     )
	 */
	protected void sequence_InputEvent(ISerializationContext context, InputEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns OutputEvent
	 *     OutputEvent returns OutputEvent
	 *
	 * Constraint:
	 *     (name=FQN ruleDeclaringType=FQN rule=ID (params+=EventParameter params+=EventParameter*)?)
	 */
	protected void sequence_OutputEvent(ISerializationContext context, OutputEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
