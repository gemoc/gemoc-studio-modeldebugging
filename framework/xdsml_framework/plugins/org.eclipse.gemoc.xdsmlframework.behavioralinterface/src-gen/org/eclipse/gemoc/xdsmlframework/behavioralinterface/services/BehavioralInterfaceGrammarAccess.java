/*
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.xdsmlframework.behavioralinterface.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BehavioralInterfaceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BehavioralInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.BehavioralInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDslKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDslNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDslNameFQNParserRuleCall_1_0 = (RuleCall)cDslNameAssignment_1.eContents().get(0);
		private final Assignment cEventsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_2_0 = (RuleCall)cEventsAssignment_2.eContents().get(0);
		
		//BehavioralInterface:
		//	'dsl' dslName=FQN
		//	events+=Event*;
		@Override public ParserRule getRule() { return rule; }
		
		//'dsl' dslName=FQN events+=Event*
		public Group getGroup() { return cGroup; }
		
		//'dsl'
		public Keyword getDslKeyword_0() { return cDslKeyword_0; }
		
		//dslName=FQN
		public Assignment getDslNameAssignment_1() { return cDslNameAssignment_1; }
		
		//FQN
		public RuleCall getDslNameFQNParserRuleCall_1_0() { return cDslNameFQNParserRuleCall_1_0; }
		
		//events+=Event*
		public Assignment getEventsAssignment_2() { return cEventsAssignment_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_0() { return cEventsEventParserRuleCall_2_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//	InputEvent | OutputEvent;
		@Override public ParserRule getRule() { return rule; }
		
		//InputEvent | OutputEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InputEvent
		public RuleCall getInputEventParserRuleCall_0() { return cInputEventParserRuleCall_0; }
		
		//OutputEvent
		public RuleCall getOutputEventParserRuleCall_1() { return cOutputEventParserRuleCall_1; }
	}
	public class InputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.InputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleDeclaringTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleDeclaringTypeFQNParserRuleCall_4_0 = (RuleCall)cRuleDeclaringTypeAssignment_4.eContents().get(0);
		private final Keyword cColonColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRuleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRuleIDTerminalRuleCall_6_0 = (RuleCall)cRuleAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParamsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cParamsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cParamsEventParameterParserRuleCall_7_2_0 = (RuleCall)cParamsAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cParamsAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cParamsEventParameterParserRuleCall_7_3_1_0 = (RuleCall)cParamsAssignment_7_3_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cInterruptibleKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cEqualsSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cInterruptibleAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final Alternatives cInterruptibleAlternatives_8_2_0 = (Alternatives)cInterruptibleAssignment_8_2.eContents().get(0);
		private final Keyword cInterruptibleTrueKeyword_8_2_0_0 = (Keyword)cInterruptibleAlternatives_8_2_0.eContents().get(0);
		private final Keyword cInterruptibleFalseKeyword_8_2_0_1 = (Keyword)cInterruptibleAlternatives_8_2_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPreconditionKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cEqualsSignKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cPreconditionDeclaringTypeAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cPreconditionDeclaringTypeFQNParserRuleCall_9_2_0 = (RuleCall)cPreconditionDeclaringTypeAssignment_9_2.eContents().get(0);
		private final Keyword cColonColonKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Assignment cPreconditionAssignment_9_4 = (Assignment)cGroup_9.eContents().get(4);
		private final RuleCall cPreconditionIDTerminalRuleCall_9_4_0 = (RuleCall)cPreconditionAssignment_9_4.eContents().get(0);
		
		//InputEvent:
		//	'input' name=FQN
		//	'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' '=' params+=EventParameter (',' params+=EventParameter)*)?
		//	('interruptible' '=' interruptible?=('true' | 'false'))? ('precondition' '=' preconditionDeclaringType=FQN '::'
		//	precondition=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'input' name=FQN 'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' '=' params+=EventParameter (','
		//params+=EventParameter)*)? ('interruptible' '=' interruptible?=('true' | 'false'))? ('precondition' '='
		//preconditionDeclaringType=FQN '::' precondition=ID)?
		public Group getGroup() { return cGroup; }
		
		//'input'
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'rule'
		public Keyword getRuleKeyword_2() { return cRuleKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//ruleDeclaringType=FQN
		public Assignment getRuleDeclaringTypeAssignment_4() { return cRuleDeclaringTypeAssignment_4; }
		
		//FQN
		public RuleCall getRuleDeclaringTypeFQNParserRuleCall_4_0() { return cRuleDeclaringTypeFQNParserRuleCall_4_0; }
		
		//'::'
		public Keyword getColonColonKeyword_5() { return cColonColonKeyword_5; }
		
		//rule=ID
		public Assignment getRuleAssignment_6() { return cRuleAssignment_6; }
		
		//ID
		public RuleCall getRuleIDTerminalRuleCall_6_0() { return cRuleIDTerminalRuleCall_6_0; }
		
		//('params' '=' params+=EventParameter (',' params+=EventParameter)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'params'
		public Keyword getParamsKeyword_7_0() { return cParamsKeyword_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }
		
		//params+=EventParameter
		public Assignment getParamsAssignment_7_2() { return cParamsAssignment_7_2; }
		
		//EventParameter
		public RuleCall getParamsEventParameterParserRuleCall_7_2_0() { return cParamsEventParameterParserRuleCall_7_2_0; }
		
		//(',' params+=EventParameter)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//','
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//params+=EventParameter
		public Assignment getParamsAssignment_7_3_1() { return cParamsAssignment_7_3_1; }
		
		//EventParameter
		public RuleCall getParamsEventParameterParserRuleCall_7_3_1_0() { return cParamsEventParameterParserRuleCall_7_3_1_0; }
		
		//('interruptible' '=' interruptible?=('true' | 'false'))?
		public Group getGroup_8() { return cGroup_8; }
		
		//'interruptible'
		public Keyword getInterruptibleKeyword_8_0() { return cInterruptibleKeyword_8_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_8_1() { return cEqualsSignKeyword_8_1; }
		
		//interruptible?=('true' | 'false')
		public Assignment getInterruptibleAssignment_8_2() { return cInterruptibleAssignment_8_2; }
		
		//('true' | 'false')
		public Alternatives getInterruptibleAlternatives_8_2_0() { return cInterruptibleAlternatives_8_2_0; }
		
		//'true'
		public Keyword getInterruptibleTrueKeyword_8_2_0_0() { return cInterruptibleTrueKeyword_8_2_0_0; }
		
		//'false'
		public Keyword getInterruptibleFalseKeyword_8_2_0_1() { return cInterruptibleFalseKeyword_8_2_0_1; }
		
		//('precondition' '=' preconditionDeclaringType=FQN '::' precondition=ID)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'precondition'
		public Keyword getPreconditionKeyword_9_0() { return cPreconditionKeyword_9_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_9_1() { return cEqualsSignKeyword_9_1; }
		
		//preconditionDeclaringType=FQN
		public Assignment getPreconditionDeclaringTypeAssignment_9_2() { return cPreconditionDeclaringTypeAssignment_9_2; }
		
		//FQN
		public RuleCall getPreconditionDeclaringTypeFQNParserRuleCall_9_2_0() { return cPreconditionDeclaringTypeFQNParserRuleCall_9_2_0; }
		
		//'::'
		public Keyword getColonColonKeyword_9_3() { return cColonColonKeyword_9_3; }
		
		//precondition=ID
		public Assignment getPreconditionAssignment_9_4() { return cPreconditionAssignment_9_4; }
		
		//ID
		public RuleCall getPreconditionIDTerminalRuleCall_9_4_0() { return cPreconditionIDTerminalRuleCall_9_4_0; }
	}
	public class OutputEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.OutputEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameFQNParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRuleDeclaringTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRuleDeclaringTypeFQNParserRuleCall_4_0 = (RuleCall)cRuleDeclaringTypeAssignment_4.eContents().get(0);
		private final Keyword cColonColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRuleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRuleIDTerminalRuleCall_6_0 = (RuleCall)cRuleAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cParamsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cParamsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cParamsEventParameterParserRuleCall_7_1_0 = (RuleCall)cParamsAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cParamsAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cParamsEventParameterParserRuleCall_7_2_1_0 = (RuleCall)cParamsAssignment_7_2_1.eContents().get(0);
		
		//OutputEvent:
		//	'output' name=FQN
		//	'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' params+=EventParameter (',' params+=EventParameter)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'output' name=FQN 'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' params+=EventParameter (','
		//params+=EventParameter)*)?
		public Group getGroup() { return cGroup; }
		
		//'output'
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }
		
		//name=FQN
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_1_0() { return cNameFQNParserRuleCall_1_0; }
		
		//'rule'
		public Keyword getRuleKeyword_2() { return cRuleKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//ruleDeclaringType=FQN
		public Assignment getRuleDeclaringTypeAssignment_4() { return cRuleDeclaringTypeAssignment_4; }
		
		//FQN
		public RuleCall getRuleDeclaringTypeFQNParserRuleCall_4_0() { return cRuleDeclaringTypeFQNParserRuleCall_4_0; }
		
		//'::'
		public Keyword getColonColonKeyword_5() { return cColonColonKeyword_5; }
		
		//rule=ID
		public Assignment getRuleAssignment_6() { return cRuleAssignment_6; }
		
		//ID
		public RuleCall getRuleIDTerminalRuleCall_6_0() { return cRuleIDTerminalRuleCall_6_0; }
		
		//('params' params+=EventParameter (',' params+=EventParameter)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'params'
		public Keyword getParamsKeyword_7_0() { return cParamsKeyword_7_0; }
		
		//params+=EventParameter
		public Assignment getParamsAssignment_7_1() { return cParamsAssignment_7_1; }
		
		//EventParameter
		public RuleCall getParamsEventParameterParserRuleCall_7_1_0() { return cParamsEventParameterParserRuleCall_7_1_0; }
		
		//(',' params+=EventParameter)*
		public Group getGroup_7_2() { return cGroup_7_2; }
		
		//','
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }
		
		//params+=EventParameter
		public Assignment getParamsAssignment_7_2_1() { return cParamsAssignment_7_2_1; }
		
		//EventParameter
		public RuleCall getParamsEventParameterParserRuleCall_7_2_1_0() { return cParamsEventParameterParserRuleCall_7_2_1_0; }
	}
	public class EventParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.EventParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameFQNParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFQNParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cManyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cManyAsteriskKeyword_3_0 = (Keyword)cManyAssignment_3.eContents().get(0);
		
		//EventParameter:
		//	name=FQN ':' type=FQN many?='*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=FQN ':' type=FQN many?='*'?
		public Group getGroup() { return cGroup; }
		
		//name=FQN
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//FQN
		public RuleCall getNameFQNParserRuleCall_0_0() { return cNameFQNParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=FQN
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//FQN
		public RuleCall getTypeFQNParserRuleCall_2_0() { return cTypeFQNParserRuleCall_2_0; }
		
		//many?='*'?
		public Assignment getManyAssignment_3() { return cManyAssignment_3; }
		
		//'*'
		public Keyword getManyAsteriskKeyword_3_0() { return cManyAsteriskKeyword_3_0; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FQN:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final BehavioralInterfaceElements pBehavioralInterface;
	private final EventElements pEvent;
	private final InputEventElements pInputEvent;
	private final OutputEventElements pOutputEvent;
	private final EventParameterElements pEventParameter;
	private final FQNElements pFQN;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BehavioralInterfaceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBehavioralInterface = new BehavioralInterfaceElements();
		this.pEvent = new EventElements();
		this.pInputEvent = new InputEventElements();
		this.pOutputEvent = new OutputEventElements();
		this.pEventParameter = new EventParameterElements();
		this.pFQN = new FQNElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.xdsmlframework.behavioralinterface.BehavioralInterface".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//BehavioralInterface:
	//	'dsl' dslName=FQN
	//	events+=Event*;
	public BehavioralInterfaceElements getBehavioralInterfaceAccess() {
		return pBehavioralInterface;
	}
	
	public ParserRule getBehavioralInterfaceRule() {
		return getBehavioralInterfaceAccess().getRule();
	}
	
	//Event:
	//	InputEvent | OutputEvent;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//InputEvent:
	//	'input' name=FQN
	//	'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' '=' params+=EventParameter (',' params+=EventParameter)*)?
	//	('interruptible' '=' interruptible?=('true' | 'false'))? ('precondition' '=' preconditionDeclaringType=FQN '::'
	//	precondition=ID)?;
	public InputEventElements getInputEventAccess() {
		return pInputEvent;
	}
	
	public ParserRule getInputEventRule() {
		return getInputEventAccess().getRule();
	}
	
	//OutputEvent:
	//	'output' name=FQN
	//	'rule' '=' ruleDeclaringType=FQN '::' rule=ID ('params' params+=EventParameter (',' params+=EventParameter)*)?;
	public OutputEventElements getOutputEventAccess() {
		return pOutputEvent;
	}
	
	public ParserRule getOutputEventRule() {
		return getOutputEventAccess().getRule();
	}
	
	//EventParameter:
	//	name=FQN ':' type=FQN many?='*'?;
	public EventParameterElements getEventParameterAccess() {
		return pEventParameter;
	}
	
	public ParserRule getEventParameterRule() {
		return getEventParameterAccess().getRule();
	}
	
	//FQN:
	//	ID ('.' ID)*;
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
