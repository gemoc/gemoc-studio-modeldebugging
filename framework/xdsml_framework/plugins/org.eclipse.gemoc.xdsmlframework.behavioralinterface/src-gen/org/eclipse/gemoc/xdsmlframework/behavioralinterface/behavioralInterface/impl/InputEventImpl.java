/**
 * generated by Xtext 2.12.0
 */
package org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.BehavioralInterfacePackage;
import org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.InputEvent;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Input Event</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.impl.InputEventImpl#isInterruptible <em>Interruptible</em>}</li>
 *   <li>{@link org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.impl.InputEventImpl#getPreconditionDeclaringType <em>Precondition Declaring Type</em>}</li>
 *   <li>{@link org.eclipse.gemoc.xdsmlframework.behavioralinterface.behavioralInterface.impl.InputEventImpl#getPrecondition <em>Precondition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InputEventImpl extends EventImpl implements InputEvent
{
  /**
   * The default value of the '{@link #isInterruptible() <em>Interruptible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInterruptible()
   * @generated
   * @ordered
   */
  protected static final boolean INTERRUPTIBLE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInterruptible() <em>Interruptible</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInterruptible()
   * @generated
   * @ordered
   */
  protected boolean interruptible = INTERRUPTIBLE_EDEFAULT;

  /**
   * The default value of the '{@link #getPreconditionDeclaringType() <em>Precondition Declaring Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreconditionDeclaringType()
   * @generated
   * @ordered
   */
  protected static final String PRECONDITION_DECLARING_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPreconditionDeclaringType() <em>Precondition Declaring Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPreconditionDeclaringType()
   * @generated
   * @ordered
   */
  protected String preconditionDeclaringType = PRECONDITION_DECLARING_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected static final String PRECONDITION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getPrecondition() <em>Precondition</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrecondition()
   * @generated
   * @ordered
   */
  protected String precondition = PRECONDITION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputEventImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BehavioralInterfacePackage.Literals.INPUT_EVENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isInterruptible()
  {
    return interruptible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInterruptible(boolean newInterruptible)
  {
    boolean oldInterruptible = interruptible;
    interruptible = newInterruptible;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehavioralInterfacePackage.INPUT_EVENT__INTERRUPTIBLE, oldInterruptible, interruptible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPreconditionDeclaringType()
  {
    return preconditionDeclaringType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPreconditionDeclaringType(String newPreconditionDeclaringType)
  {
    String oldPreconditionDeclaringType = preconditionDeclaringType;
    preconditionDeclaringType = newPreconditionDeclaringType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION_DECLARING_TYPE, oldPreconditionDeclaringType, preconditionDeclaringType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getPrecondition()
  {
    return precondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrecondition(String newPrecondition)
  {
    String oldPrecondition = precondition;
    precondition = newPrecondition;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION, oldPrecondition, precondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BehavioralInterfacePackage.INPUT_EVENT__INTERRUPTIBLE:
        return isInterruptible();
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION_DECLARING_TYPE:
        return getPreconditionDeclaringType();
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION:
        return getPrecondition();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BehavioralInterfacePackage.INPUT_EVENT__INTERRUPTIBLE:
        setInterruptible((Boolean)newValue);
        return;
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION_DECLARING_TYPE:
        setPreconditionDeclaringType((String)newValue);
        return;
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION:
        setPrecondition((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BehavioralInterfacePackage.INPUT_EVENT__INTERRUPTIBLE:
        setInterruptible(INTERRUPTIBLE_EDEFAULT);
        return;
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION_DECLARING_TYPE:
        setPreconditionDeclaringType(PRECONDITION_DECLARING_TYPE_EDEFAULT);
        return;
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION:
        setPrecondition(PRECONDITION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BehavioralInterfacePackage.INPUT_EVENT__INTERRUPTIBLE:
        return interruptible != INTERRUPTIBLE_EDEFAULT;
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION_DECLARING_TYPE:
        return PRECONDITION_DECLARING_TYPE_EDEFAULT == null ? preconditionDeclaringType != null : !PRECONDITION_DECLARING_TYPE_EDEFAULT.equals(preconditionDeclaringType);
      case BehavioralInterfacePackage.INPUT_EVENT__PRECONDITION:
        return PRECONDITION_EDEFAULT == null ? precondition != null : !PRECONDITION_EDEFAULT.equals(precondition);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (interruptible: ");
    result.append(interruptible);
    result.append(", preconditionDeclaringType: ");
    result.append(preconditionDeclaringType);
    result.append(", precondition: ");
    result.append(precondition);
    result.append(')');
    return result.toString();
  }

} //InputEventImpl
